/* --------------------
   Case Study Questions
   --------------------*/
SET search_path = dannys_diner;

-- 1. What is the total amount each customer spent at the restaurant?

SELECT s.customer_id, SUM(m.price) AS total_spending 
FROM sales s
LEFT JOIN menu m
ON s.product_id = m.product_id
GROUP BY s.customer_id
ORDER BY s.customer_id;

-- 2. How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(DISTINCT order_date) AS num_visits
FROM sales
GROUP BY customer_id
ORDER BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

SELECT a.customer_id, m.product_name
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) AS rank 
      FROM sales) a
LEFT JOIN menu m
ON a.product_id = m.product_id
WHERE a.rank = 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT m.product_name, COUNT(s.product_id) AS num_sold
FROM sales s
LEFT JOIN menu m
ON s.product_id = m.product_id
GROUP BY m.product_name
ORDER BY num_sold DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?

SELECT t.customer_id, m.product_name
FROM (
  SELECT customer_id, 
  		product_id, 
  		COUNT(product_id) AS num_sold, 
  		DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(product_id) DESC ) as ranked
	FROM sales 
	GROUP BY customer_id, product_id
	) AS t
LEFT JOIN menu m
ON t.product_id = m.product_id
WHERE t.ranked = 1
ORDER BY t.customer_id;

-- 6. Which item was purchased first by the customer after they became a member?

WITH first_order AS (SELECT s.customer_id, s.product_id, row_number () OVER (PARTITION BY s.customer_id ORDER BY s.order_date ASC) as row_num
FROM sales s
LEFT JOIN members me
ON s.customer_id = me.customer_id
WHERE me.join_date < s.order_date
ORDER BY s.order_date ASC)

SELECT fo.customer_id, m.product_name
FROM first_order fo
LEFT JOIN menu m
ON fo.product_id = m.product_id
WHERE fo.row_num = 1;


-- 7. Which item was purchased just before the customer became a member?

WITH before_memb_order AS (SELECT s.customer_id, s.product_id, row_number () OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) as row_num
FROM sales s
LEFT JOIN members me
ON s.customer_id = me.customer_id
WHERE me.join_date > s.order_date
ORDER BY s.order_date DESC)

SELECT bm.customer_id, m.product_name
FROM before_memb_order bm
LEFT JOIN menu m
ON bm.product_id = m.product_id
WHERE bm.row_num = 1
ORDER BY bm.customer_id;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT s.customer_id, COUNT(s.product_id) AS total_items, SUM(m.price) AS total_spent
FROM sales s
LEFT JOIN members me
ON s.customer_id = me.customer_id
LEFT JOIN menu m
ON s.product_id = m.product_id
WHERE me.join_date > s.order_date
GROUP BY s.customer_id
ORDER BY s.customer_id;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

-- assumption: points acculmulation begins after joining member program.

WITH points_acc AS 
(SELECT s.customer_id, 
	CASE WHEN m.product_name = 'sushi' THEN m.price * 10 * 2 
    ELSE m.price * 10 
    END AS points
FROM sales s
LEFT JOIN menu m
ON s.product_id = m.product_id
LEFT JOIN members me
ON s.customer_id = me.customer_id
WHERE s.order_date >= me.join_date)

SELECT customer_id, SUM(points) AS total_points
FROM points_acc
GROUP BY customer_id
ORDER BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

-- assumption: points acculmulation begins after joining member program.

WITH points_acc AS 
(SELECT s.customer_id, s.order_date, me.join_date, m.price,
	CASE WHEN (s.order_date - me.join_date) BETWEEN 0 AND 6 THEN m.price * 10 * 2
 	WHEN m.product_name = 'sushi' THEN m.price * 10 * 2 
    ELSE m.price * 10 
    END AS points
FROM sales s
LEFT JOIN menu m
ON s.product_id = m.product_id
